import groovy.json.JsonSlurper

node { 
    stage("checkout") {
        checkout scm
    }
    stage('create plan - good') {
        dir('azure/good') {
            ansiColor('xterm') {
                sh '''
                terraform init
                terraform plan --out tfplan.binary --refresh=false
                terraform show -json tfplan.binary > tfplan.json
                '''
            }
        }
    }
    stage('validate plan - good') {
        dir('azure/good') {
            result = sh (
                script: 'curl localhost:8181/v0/data/rules/main -d @tfplan.json',
                returnStdout: true
            ).trim()

            def json = new JsonSlurper().parseText(result)
            if (json.allowed == false) {
                for(def msg : json.errors) {
                    echo "DENIED: " + msg
                }
                error 'Terraform plan is not valid'
            }
        }
    }
    stage('create plan - bad') {
        dir('azure/bad') {
            ansiColor('xterm') {
                sh '''
                terraform init
                terraform plan --out tfplan.binary --refresh=false
                terraform show -json tfplan.binary > tfplan.json
                '''
            }
        }
    }
    stage('validate plan - bad') {
        dir('azure/bad') {
            result = sh (
                script: 'curl localhost:8181/v0/data/rules/main -d @tfplan.json',
                returnStdout: true
            ).trim()

            def json = new JsonSlurper().parseText(result)
            if (json.allowed == false) {
                for(def msg : json.errors) {
                    echo "DENIED: " + msg
                }
                error 'Terraform plan is not valid'
            }
        }
    }
    stage('apply') {
        // terraform apply tfplan.binary
        // terraform show -json terraform.tfstate > terraform.tfstate.json
        // patch (via curl) the DAS dataset with the state json content
    }
}
